// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fnAlphaijLogLik
double fnAlphaijLogLik(const double& alpha_ij, NumericVector mu_ij_vec, const double& s_j, const int& lambda_ij, const double& eta_ell, const double& w_ell, const double& upsilon_alpha, const double& u_2, NumericVector y_ij_vec, NumericVector delta_ij_vec);
RcppExport SEXP _bnpzimnr_fnAlphaijLogLik(SEXP alpha_ijSEXP, SEXP mu_ij_vecSEXP, SEXP s_jSEXP, SEXP lambda_ijSEXP, SEXP eta_ellSEXP, SEXP w_ellSEXP, SEXP upsilon_alphaSEXP, SEXP u_2SEXP, SEXP y_ij_vecSEXP, SEXP delta_ij_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha_ij(alpha_ijSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_ij_vec(mu_ij_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< const int& >::type lambda_ij(lambda_ijSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_ell(eta_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell(w_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_alpha(upsilon_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_ij_vec(y_ij_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_ij_vec(delta_ij_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnAlphaijLogLik(alpha_ij, mu_ij_vec, s_j, lambda_ij, eta_ell, w_ell, upsilon_alpha, u_2, y_ij_vec, delta_ij_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampAlphaMat
NumericMatrix fnSampAlphaMat(NumericMatrix Alpha_mat, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, NumericVector rep_K, const double& upsilon_alpha, const double& u_2, NumericMatrix Y_mat, NumericMatrix Delta_mat, const double& alpha_ij_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampAlphaMat(SEXP Alpha_matSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP rep_KSEXP, SEXP upsilon_alphaSEXP, SEXP u_2SEXP, SEXP Y_matSEXP, SEXP Delta_matSEXP, SEXP alpha_ij_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Alpha_mat(Alpha_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_alpha(upsilon_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_ij_proposal_sd(alpha_ij_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampAlphaMat(Alpha_mat, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, rep_K, upsilon_alpha, u_2, Y_mat, Delta_mat, alpha_ij_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnSampBetaMat
NumericMatrix fnSampBetaMat(NumericMatrix Beta_mat, NumericMatrix Mu_mat, NumericMatrix Delta_mat, NumericVector s_vec, NumericVector tau_2_vec, NumericMatrix X_mat, NumericMatrix Y_mat, NumericVector rep_K, NumericVector beta_j_proposal_sd_vec);
RcppExport SEXP _bnpzimnr_fnSampBetaMat(SEXP Beta_matSEXP, SEXP Mu_matSEXP, SEXP Delta_matSEXP, SEXP s_vecSEXP, SEXP tau_2_vecSEXP, SEXP X_matSEXP, SEXP Y_matSEXP, SEXP rep_KSEXP, SEXP beta_j_proposal_sd_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau_2_vec(tau_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_j_proposal_sd_vec(beta_j_proposal_sd_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampBetaMat(Beta_mat, Mu_mat, Delta_mat, s_vec, tau_2_vec, X_mat, Y_mat, rep_K, beta_j_proposal_sd_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampDeltaMat
NumericMatrix fnSampDeltaMat(NumericMatrix Delta_mat, NumericMatrix Epsilon_mat, NumericMatrix Theta_mat, NumericMatrix C_theta_mat, IntegerVector d_theta_vec, NumericMatrix Theta_star_mat, NumericVector psi_theta_vec, NumericVector sigma_2_theta_vec, NumericMatrix Alpha_mat, NumericVector r_vec, NumericVector s_vec, NumericMatrix Mu_mat, NumericMatrix Y_mat, NumericVector condition, NumericVector subject, const double& theta_kj_proposal_sd, NumericVector psi_alpha_vec, NumericVector w_alpha_vec, NumericVector eta_alpha_vec, IntegerVector c_alpha_vec, IntegerVector d_alpha_vec, IntegerVector lambda_alpha_vec, NumericVector rep_K, NumericMatrix Xtbeta_mat, const double& upsilon_alpha, const double& u_alpha_2);
RcppExport SEXP _bnpzimnr_fnSampDeltaMat(SEXP Delta_matSEXP, SEXP Epsilon_matSEXP, SEXP Theta_matSEXP, SEXP C_theta_matSEXP, SEXP d_theta_vecSEXP, SEXP Theta_star_matSEXP, SEXP psi_theta_vecSEXP, SEXP sigma_2_theta_vecSEXP, SEXP Alpha_matSEXP, SEXP r_vecSEXP, SEXP s_vecSEXP, SEXP Mu_matSEXP, SEXP Y_matSEXP, SEXP conditionSEXP, SEXP subjectSEXP, SEXP theta_kj_proposal_sdSEXP, SEXP psi_alpha_vecSEXP, SEXP w_alpha_vecSEXP, SEXP eta_alpha_vecSEXP, SEXP c_alpha_vecSEXP, SEXP d_alpha_vecSEXP, SEXP lambda_alpha_vecSEXP, SEXP rep_KSEXP, SEXP Xtbeta_matSEXP, SEXP upsilon_alphaSEXP, SEXP u_alpha_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Epsilon_mat(Epsilon_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_mat(Theta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_theta_mat(C_theta_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d_theta_vec(d_theta_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_star_mat(Theta_star_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_theta_vec(psi_theta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_theta_vec(sigma_2_theta_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Alpha_mat(Alpha_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_kj_proposal_sd(theta_kj_proposal_sdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_alpha_vec(psi_alpha_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_alpha_vec(w_alpha_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_alpha_vec(eta_alpha_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_alpha_vec(c_alpha_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d_alpha_vec(d_alpha_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lambda_alpha_vec(lambda_alpha_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xtbeta_mat(Xtbeta_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_alpha(upsilon_alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_alpha_2(u_alpha_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampDeltaMat(Delta_mat, Epsilon_mat, Theta_mat, C_theta_mat, d_theta_vec, Theta_star_mat, psi_theta_vec, sigma_2_theta_vec, Alpha_mat, r_vec, s_vec, Mu_mat, Y_mat, condition, subject, theta_kj_proposal_sd, psi_alpha_vec, w_alpha_vec, eta_alpha_vec, c_alpha_vec, d_alpha_vec, lambda_alpha_vec, rep_K, Xtbeta_mat, upsilon_alpha, u_alpha_2));
    return rcpp_result_gen;
END_RCPP
}
// fnStickBreak
NumericVector fnStickBreak(NumericVector weights);
RcppExport SEXP _bnpzimnr_fnStickBreak(SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(fnStickBreak(weights));
    return rcpp_result_gen;
END_RCPP
}
// fnSampStarMatCommon
NumericMatrix fnSampStarMatCommon(NumericMatrix Param_mat, NumericMatrix C_mat, NumericVector sigma_2_vec, const double& a_star, const double& b_star_2, const double& L_trunc, bool truncated, double lower, double upper);
RcppExport SEXP _bnpzimnr_fnSampStarMatCommon(SEXP Param_matSEXP, SEXP C_matSEXP, SEXP sigma_2_vecSEXP, SEXP a_starSEXP, SEXP b_star_2SEXP, SEXP L_truncSEXP, SEXP truncatedSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_mat(Param_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_mat(C_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_star(a_starSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_star_2(b_star_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type L_trunc(L_truncSEXP);
    Rcpp::traits::input_parameter< bool >::type truncated(truncatedSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampStarMatCommon(Param_mat, C_mat, sigma_2_vec, a_star, b_star_2, L_trunc, truncated, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// fnSampStarMat
NumericMatrix fnSampStarMat(NumericMatrix Param_mat, NumericMatrix C_mat, NumericVector sigma_2_vec, const double& a_star, const double& b_star_2, const double& L_trunc);
RcppExport SEXP _bnpzimnr_fnSampStarMat(SEXP Param_matSEXP, SEXP C_matSEXP, SEXP sigma_2_vecSEXP, SEXP a_starSEXP, SEXP b_star_2SEXP, SEXP L_truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_mat(Param_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_mat(C_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_star(a_starSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_star_2(b_star_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type L_trunc(L_truncSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampStarMat(Param_mat, C_mat, sigma_2_vec, a_star, b_star_2, L_trunc));
    return rcpp_result_gen;
END_RCPP
}
// fnSampStarMatTrunc
NumericMatrix fnSampStarMatTrunc(NumericMatrix Param_mat, NumericMatrix C_mat, NumericVector sigma_2_vec, const double& a_star, const double& b_star_2, const double& L_trunc, double lower, double upper);
RcppExport SEXP _bnpzimnr_fnSampStarMatTrunc(SEXP Param_matSEXP, SEXP C_matSEXP, SEXP sigma_2_vecSEXP, SEXP a_starSEXP, SEXP b_star_2SEXP, SEXP L_truncSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_mat(Param_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_mat(C_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_star(a_starSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_star_2(b_star_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type L_trunc(L_truncSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampStarMatTrunc(Param_mat, C_mat, sigma_2_vec, a_star, b_star_2, L_trunc, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// fnCProbs
NumericVector fnCProbs(const double& param_kj, NumericVector psi_vec, NumericVector Param_star_k_vec, const double& sigma_k_2);
RcppExport SEXP _bnpzimnr_fnCProbs(SEXP param_kjSEXP, SEXP psi_vecSEXP, SEXP Param_star_k_vecSEXP, SEXP sigma_k_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type param_kj(param_kjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Param_star_k_vec(Param_star_k_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_k_2(sigma_k_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnCProbs(param_kj, psi_vec, Param_star_k_vec, sigma_k_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampCMat
NumericMatrix fnSampCMat(NumericMatrix C_mat, NumericMatrix Param_mat, IntegerVector d_vec, NumericVector psi_vec, NumericMatrix Param_star_mat, NumericVector sigma_2_vec);
RcppExport SEXP _bnpzimnr_fnSampCMat(SEXP C_matSEXP, SEXP Param_matSEXP, SEXP d_vecSEXP, SEXP psi_vecSEXP, SEXP Param_star_matSEXP, SEXP sigma_2_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type C_mat(C_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_mat(Param_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d_vec(d_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_star_mat(Param_star_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampCMat(C_mat, Param_mat, d_vec, psi_vec, Param_star_mat, sigma_2_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampXiMat
NumericMatrix fnSampXiMat(NumericMatrix Xi_mat, NumericMatrix Epsilon_mat, NumericMatrix Delta_mat, NumericMatrix Xi_star_mat, NumericMatrix C_xi_mat, NumericVector sigma_2_xi_vec, NumericVector condition, const double& xi_kj_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampXiMat(SEXP Xi_matSEXP, SEXP Epsilon_matSEXP, SEXP Delta_matSEXP, SEXP Xi_star_matSEXP, SEXP C_xi_matSEXP, SEXP sigma_2_xi_vecSEXP, SEXP conditionSEXP, SEXP xi_kj_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xi_mat(Xi_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Epsilon_mat(Epsilon_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xi_star_mat(Xi_star_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_xi_mat(C_xi_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_xi_vec(sigma_2_xi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi_kj_proposal_sd(xi_kj_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampXiMat(Xi_mat, Epsilon_mat, Delta_mat, Xi_star_mat, C_xi_mat, sigma_2_xi_vec, condition, xi_kj_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnSampXiMatMarg
NumericMatrix fnSampXiMatMarg(NumericMatrix Xi_mat, NumericMatrix Epsilon_mat, NumericMatrix Delta_mat, NumericMatrix Xi_star_mat, NumericVector psi_xi_vec, NumericVector sigma_2_xi_vec, NumericVector condition, const double& xi_kj_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampXiMatMarg(SEXP Xi_matSEXP, SEXP Epsilon_matSEXP, SEXP Delta_matSEXP, SEXP Xi_star_matSEXP, SEXP psi_xi_vecSEXP, SEXP sigma_2_xi_vecSEXP, SEXP conditionSEXP, SEXP xi_kj_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xi_mat(Xi_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Epsilon_mat(Epsilon_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xi_star_mat(Xi_star_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_xi_vec(psi_xi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_xi_vec(sigma_2_xi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi_kj_proposal_sd(xi_kj_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampXiMatMarg(Xi_mat, Epsilon_mat, Delta_mat, Xi_star_mat, psi_xi_vec, sigma_2_xi_vec, condition, xi_kj_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnLogLik
double fnLogLik(const double& y_ikj, const double& s_j, const double& mu_ikj, const double& delta_ikj);
RcppExport SEXP _bnpzimnr_fnLogLik(SEXP y_ikjSEXP, SEXP s_jSEXP, SEXP mu_ikjSEXP, SEXP delta_ikjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type y_ikj(y_ikjSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_ikj(mu_ikjSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta_ikj(delta_ikjSEXP);
    rcpp_result_gen = Rcpp::wrap(fnLogLik(y_ikj, s_j, mu_ikj, delta_ikj));
    return rcpp_result_gen;
END_RCPP
}
// fnOtuLogLik
double fnOtuLogLik(const double& s_j, NumericVector mu_j_vec, NumericVector rep_K, NumericVector y_j_vec, NumericVector delta_j_vec);
RcppExport SEXP _bnpzimnr_fnOtuLogLik(SEXP s_jSEXP, SEXP mu_j_vecSEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP, SEXP delta_j_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_j_vec(delta_j_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnOtuLogLik(s_j, mu_j_vec, rep_K, y_j_vec, delta_j_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampleLogLikNoGamma
double fnSampleLogLikNoGamma(NumericVector mu_ik_vec, NumericVector s_vec, NumericVector y_ik_vec, NumericVector delta_ik_vec);
RcppExport SEXP _bnpzimnr_fnSampleLogLikNoGamma(SEXP mu_ik_vecSEXP, SEXP s_vecSEXP, SEXP y_ik_vecSEXP, SEXP delta_ik_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu_ik_vec(mu_ik_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_ik_vec(y_ik_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_ik_vec(delta_ik_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampleLogLikNoGamma(mu_ik_vec, s_vec, y_ik_vec, delta_ik_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnRepLogLik
double fnRepLogLik(NumericVector mu_ij_vec, const double& s_j, NumericVector y_ij_vec, NumericVector delta_ij_vec);
RcppExport SEXP _bnpzimnr_fnRepLogLik(SEXP mu_ij_vecSEXP, SEXP s_jSEXP, SEXP y_ij_vecSEXP, SEXP delta_ij_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu_ij_vec(mu_ij_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_ij_vec(y_ij_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_ij_vec(delta_ij_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnRepLogLik(mu_ij_vec, s_j, y_ij_vec, delta_ij_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSubjectLogLik
double fnSubjectLogLik(const double& k, NumericVector y_j_vec, const double& s_j, NumericVector mu_j_vec, NumericVector delta_j_vec, NumericVector condition);
RcppExport SEXP _bnpzimnr_fnSubjectLogLik(SEXP kSEXP, SEXP y_j_vecSEXP, SEXP s_jSEXP, SEXP mu_j_vecSEXP, SEXP delta_j_vecSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_j_vec(delta_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSubjectLogLik(k, y_j_vec, s_j, mu_j_vec, delta_j_vec, condition));
    return rcpp_result_gen;
END_RCPP
}
// fnWlLogLik
double fnWlLogLik(const int& ell_idx1, const double& w_ell, NumericVector param_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, const double& upsilon, const double& a_w, const double& b_w, const double& u_2);
RcppExport SEXP _bnpzimnr_fnWlLogLik(SEXP ell_idx1SEXP, SEXP w_ellSEXP, SEXP param_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP a_wSEXP, SEXP b_wSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ell_idx1(ell_idx1SEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell(w_ellSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_w(a_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_w(b_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnWlLogLik(ell_idx1, w_ell, param_vec, lambda_vec, c_vec, eta_vec, upsilon, a_w, b_w, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampWVec
NumericVector fnSampWVec(NumericVector w_vec, NumericVector param_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, const double& upsilon, const double& a_w, const double& b_w, const double& u_2, NumericVector w_vec_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampWVec(SEXP w_vecSEXP, SEXP param_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP a_wSEXP, SEXP b_wSEXP, SEXP u_2SEXP, SEXP w_vec_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_w(a_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_w(b_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec_proposal_sd(w_vec_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampWVec(w_vec, param_vec, lambda_vec, c_vec, eta_vec, upsilon, a_w, b_w, u_2, w_vec_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnSampEtaVec
NumericVector fnSampEtaVec(NumericVector eta_vec, NumericVector param_vec, NumericVector w_vec, NumericVector lambda_vec, NumericVector c_vec, const double& u_2, const double& upsilon, const double& b_eta_2);
RcppExport SEXP _bnpzimnr_fnSampEtaVec(SEXP eta_vecSEXP, SEXP param_vecSEXP, SEXP w_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP u_2SEXP, SEXP upsilonSEXP, SEXP b_eta_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_eta_2(b_eta_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampEtaVec(eta_vec, param_vec, w_vec, lambda_vec, c_vec, u_2, upsilon, b_eta_2));
    return rcpp_result_gen;
END_RCPP
}
// fnLogMeanConstraintPrior
NumericVector fnLogMeanConstraintPrior(const double& param, NumericVector psi_vec, NumericVector eta_vec, NumericVector w_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _bnpzimnr_fnLogMeanConstraintPrior(SEXP paramSEXP, SEXP psi_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnLogMeanConstraintPrior(param, psi_vec, eta_vec, w_vec, upsilon, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampC
int fnSampC(const double& param, NumericVector psi_vec, NumericVector w_vec, NumericVector eta_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _bnpzimnr_fnSampC(SEXP paramSEXP, SEXP psi_vecSEXP, SEXP w_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampC(param, psi_vec, w_vec, eta_vec, upsilon, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampCVec
IntegerVector fnSampCVec(IntegerVector c_vec, IntegerVector d_vec, NumericVector param_vec, NumericVector psi_vec, NumericVector w_vec, NumericVector eta_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _bnpzimnr_fnSampCVec(SEXP c_vecSEXP, SEXP d_vecSEXP, SEXP param_vecSEXP, SEXP psi_vecSEXP, SEXP w_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d_vec(d_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampCVec(c_vec, d_vec, param_vec, psi_vec, w_vec, eta_vec, upsilon, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampLambdaVec
IntegerVector fnSampLambdaVec(IntegerVector lambda_vec, NumericVector param_vec, IntegerVector c_vec, NumericVector w_vec, NumericVector eta_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _bnpzimnr_fnSampLambdaVec(SEXP lambda_vecSEXP, SEXP param_vecSEXP, SEXP c_vecSEXP, SEXP w_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampLambdaVec(lambda_vec, param_vec, c_vec, w_vec, eta_vec, upsilon, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnRtkLogLik
double fnRtkLogLik(const double& r_ik, NumericVector mu_ik_vec, NumericVector s_vec, const int& lambda_ik, const double& eta_ell, const double& w_ell, const double& upsilon_r, const double& u_2, NumericVector y_ik_vec, NumericVector delta_ik_vec);
RcppExport SEXP _bnpzimnr_fnRtkLogLik(SEXP r_ikSEXP, SEXP mu_ik_vecSEXP, SEXP s_vecSEXP, SEXP lambda_ikSEXP, SEXP eta_ellSEXP, SEXP w_ellSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP y_ik_vecSEXP, SEXP delta_ik_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type r_ik(r_ikSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_ik_vec(mu_ik_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type lambda_ik(lambda_ikSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_ell(eta_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell(w_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_ik_vec(y_ik_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_ik_vec(delta_ik_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnRtkLogLik(r_ik, mu_ik_vec, s_vec, lambda_ik, eta_ell, w_ell, upsilon_r, u_2, y_ik_vec, delta_ik_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampRVec
NumericVector fnSampRVec(NumericVector r_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, NumericVector rep_K, const double& upsilon_r, const double& u_2, NumericMatrix Y_mat, NumericMatrix Delta_mat, NumericVector r_vec_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampRVec(SEXP r_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP rep_KSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP Y_matSEXP, SEXP Delta_matSEXP, SEXP r_vec_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec_proposal_sd(r_vec_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampRVec(r_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, rep_K, upsilon_r, u_2, Y_mat, Delta_mat, r_vec_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnSjTildeLogLik
double fnSjTildeLogLik(const double& s_j, NumericVector mu_j_vec, NumericVector rep_K, NumericVector y_j_vec, NumericVector delta_j_vec, const double& h_scal, const double& kappa_2);
RcppExport SEXP _bnpzimnr_fnSjTildeLogLik(SEXP s_jSEXP, SEXP mu_j_vecSEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP, SEXP delta_j_vecSEXP, SEXP h_scalSEXP, SEXP kappa_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_j_vec(delta_j_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_scal(h_scalSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa_2(kappa_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSjTildeLogLik(s_j, mu_j_vec, rep_K, y_j_vec, delta_j_vec, h_scal, kappa_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampSVec
NumericVector fnSampSVec(NumericVector s_vec, NumericMatrix Mu_mat, NumericVector rep_K, NumericMatrix Y_mat, NumericMatrix Delta_mat, const double& h_scal, const double& kappa_2, NumericVector s_vec_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampSVec(SEXP s_vecSEXP, SEXP Mu_matSEXP, SEXP rep_KSEXP, SEXP Y_matSEXP, SEXP Delta_matSEXP, SEXP h_scalSEXP, SEXP kappa_2SEXP, SEXP s_vec_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_scal(h_scalSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa_2(kappa_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec_proposal_sd(s_vec_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampSVec(s_vec, Mu_mat, rep_K, Y_mat, Delta_mat, h_scal, kappa_2, s_vec_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnSampSigma2
NumericVector fnSampSigma2(NumericMatrix Param_mat, NumericMatrix Param_star_mat, NumericMatrix C_mat, const double& a_param, const double& b_param);
RcppExport SEXP _bnpzimnr_fnSampSigma2(SEXP Param_matSEXP, SEXP Param_star_matSEXP, SEXP C_matSEXP, SEXP a_paramSEXP, SEXP b_paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_mat(Param_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Param_star_mat(Param_star_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_mat(C_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_param(a_paramSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_param(b_paramSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampSigma2(Param_mat, Param_star_mat, C_mat, a_param, b_param));
    return rcpp_result_gen;
END_RCPP
}
// fnGetMuJVecProp
NumericVector fnGetMuJVecProp(const double& k, NumericVector mu_j_vec_curr, const double& theta_kj_curr, const double& theta_kj_prop, NumericVector r_vec, NumericVector alpha_j_vec, NumericVector condition, NumericVector subject);
RcppExport SEXP _bnpzimnr_fnGetMuJVecProp(SEXP kSEXP, SEXP mu_j_vec_currSEXP, SEXP theta_kj_currSEXP, SEXP theta_kj_propSEXP, SEXP r_vecSEXP, SEXP alpha_j_vecSEXP, SEXP conditionSEXP, SEXP subjectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec_curr(mu_j_vec_currSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_kj_curr(theta_kj_currSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_kj_prop(theta_kj_propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha_j_vec(alpha_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subject(subjectSEXP);
    rcpp_result_gen = Rcpp::wrap(fnGetMuJVecProp(k, mu_j_vec_curr, theta_kj_curr, theta_kj_prop, r_vec, alpha_j_vec, condition, subject));
    return rcpp_result_gen;
END_RCPP
}
// fnSampThetaMat
NumericMatrix fnSampThetaMat(NumericMatrix Theta_mat, NumericMatrix Mu_mat, NumericMatrix C_theta_mat, NumericMatrix Theta_star_mat, NumericMatrix Delta_mat, NumericVector sigma_2_theta_vec, NumericVector s_vec, NumericVector r_vec, NumericMatrix Alpha_mat, NumericMatrix Y_mat, NumericVector condition, NumericVector subject, NumericMatrix B_mat, NumericMatrix Delta_sum_mat, const double& theta_kj_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampThetaMat(SEXP Theta_matSEXP, SEXP Mu_matSEXP, SEXP C_theta_matSEXP, SEXP Theta_star_matSEXP, SEXP Delta_matSEXP, SEXP sigma_2_theta_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP Alpha_matSEXP, SEXP Y_matSEXP, SEXP conditionSEXP, SEXP subjectSEXP, SEXP B_matSEXP, SEXP Delta_sum_matSEXP, SEXP theta_kj_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_mat(Theta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C_theta_mat(C_theta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_star_mat(Theta_star_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_theta_vec(sigma_2_theta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Alpha_mat(Alpha_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B_mat(B_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_sum_mat(Delta_sum_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_kj_proposal_sd(theta_kj_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampThetaMat(Theta_mat, Mu_mat, C_theta_mat, Theta_star_mat, Delta_mat, sigma_2_theta_vec, s_vec, r_vec, Alpha_mat, Y_mat, condition, subject, B_mat, Delta_sum_mat, theta_kj_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnSampThetaMatMarg
NumericMatrix fnSampThetaMatMarg(NumericMatrix Theta_mat, NumericMatrix Mu_mat, NumericVector psi_theta_vec, NumericMatrix Theta_star_mat, NumericMatrix Delta_mat, NumericVector sigma_2_theta_vec, NumericVector s_vec, NumericVector r_vec, NumericMatrix Alpha_mat, NumericMatrix Y_mat, NumericVector condition, NumericVector subject, NumericMatrix B_mat, NumericMatrix Delta_sum_mat, const double& theta_kj_proposal_sd);
RcppExport SEXP _bnpzimnr_fnSampThetaMatMarg(SEXP Theta_matSEXP, SEXP Mu_matSEXP, SEXP psi_theta_vecSEXP, SEXP Theta_star_matSEXP, SEXP Delta_matSEXP, SEXP sigma_2_theta_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP Alpha_matSEXP, SEXP Y_matSEXP, SEXP conditionSEXP, SEXP subjectSEXP, SEXP B_matSEXP, SEXP Delta_sum_matSEXP, SEXP theta_kj_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_mat(Theta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_theta_vec(psi_theta_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_star_mat(Theta_star_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_theta_vec(sigma_2_theta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Alpha_mat(Alpha_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B_mat(B_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_sum_mat(Delta_sum_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_kj_proposal_sd(theta_kj_proposal_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampThetaMatMarg(Theta_mat, Mu_mat, psi_theta_vec, Theta_star_mat, Delta_mat, sigma_2_theta_vec, s_vec, r_vec, Alpha_mat, Y_mat, condition, subject, B_mat, Delta_sum_mat, theta_kj_proposal_sd));
    return rcpp_result_gen;
END_RCPP
}
// fnAprxEql
bool fnAprxEql(double x, double y);
RcppExport SEXP _bnpzimnr_fnAprxEql(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fnAprxEql(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fnAcceptProposal
bool fnAcceptProposal(const double& curr_log_lik, const double& prop_log_lik, const double log_curr_to_prop_prob, const double log_prop_to_curr_prob);
RcppExport SEXP _bnpzimnr_fnAcceptProposal(SEXP curr_log_likSEXP, SEXP prop_log_likSEXP, SEXP log_curr_to_prop_probSEXP, SEXP log_prop_to_curr_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type curr_log_lik(curr_log_likSEXP);
    Rcpp::traits::input_parameter< const double& >::type prop_log_lik(prop_log_likSEXP);
    Rcpp::traits::input_parameter< const double >::type log_curr_to_prop_prob(log_curr_to_prop_probSEXP);
    Rcpp::traits::input_parameter< const double >::type log_prop_to_curr_prob(log_prop_to_curr_probSEXP);
    rcpp_result_gen = Rcpp::wrap(fnAcceptProposal(curr_log_lik, prop_log_lik, log_curr_to_prop_prob, log_prop_to_curr_prob));
    return rcpp_result_gen;
END_RCPP
}
// fnMuMatCorrect
void fnMuMatCorrect(NumericMatrix Mu_mat, NumericMatrix Delta_mat, NumericVector r_vec, NumericMatrix Alpha_mat, NumericMatrix Theta_mat, NumericVector rep_K, NumericVector subject, NumericVector condition, Nullable<NumericMatrix> Xtbeta_mat_);
RcppExport SEXP _bnpzimnr_fnMuMatCorrect(SEXP Mu_matSEXP, SEXP Delta_matSEXP, SEXP r_vecSEXP, SEXP Alpha_matSEXP, SEXP Theta_matSEXP, SEXP rep_KSEXP, SEXP subjectSEXP, SEXP conditionSEXP, SEXP Xtbeta_mat_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Delta_mat(Delta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Alpha_mat(Alpha_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_mat(Theta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type Xtbeta_mat_(Xtbeta_mat_SEXP);
    fnMuMatCorrect(Mu_mat, Delta_mat, r_vec, Alpha_mat, Theta_mat, rep_K, subject, condition, Xtbeta_mat_);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bnpzimnr_fnAlphaijLogLik", (DL_FUNC) &_bnpzimnr_fnAlphaijLogLik, 10},
    {"_bnpzimnr_fnSampAlphaMat", (DL_FUNC) &_bnpzimnr_fnSampAlphaMat, 13},
    {"_bnpzimnr_fnSampBetaMat", (DL_FUNC) &_bnpzimnr_fnSampBetaMat, 9},
    {"_bnpzimnr_fnSampDeltaMat", (DL_FUNC) &_bnpzimnr_fnSampDeltaMat, 26},
    {"_bnpzimnr_fnStickBreak", (DL_FUNC) &_bnpzimnr_fnStickBreak, 1},
    {"_bnpzimnr_fnSampStarMatCommon", (DL_FUNC) &_bnpzimnr_fnSampStarMatCommon, 9},
    {"_bnpzimnr_fnSampStarMat", (DL_FUNC) &_bnpzimnr_fnSampStarMat, 6},
    {"_bnpzimnr_fnSampStarMatTrunc", (DL_FUNC) &_bnpzimnr_fnSampStarMatTrunc, 8},
    {"_bnpzimnr_fnCProbs", (DL_FUNC) &_bnpzimnr_fnCProbs, 4},
    {"_bnpzimnr_fnSampCMat", (DL_FUNC) &_bnpzimnr_fnSampCMat, 6},
    {"_bnpzimnr_fnSampXiMat", (DL_FUNC) &_bnpzimnr_fnSampXiMat, 8},
    {"_bnpzimnr_fnSampXiMatMarg", (DL_FUNC) &_bnpzimnr_fnSampXiMatMarg, 8},
    {"_bnpzimnr_fnLogLik", (DL_FUNC) &_bnpzimnr_fnLogLik, 4},
    {"_bnpzimnr_fnOtuLogLik", (DL_FUNC) &_bnpzimnr_fnOtuLogLik, 5},
    {"_bnpzimnr_fnSampleLogLikNoGamma", (DL_FUNC) &_bnpzimnr_fnSampleLogLikNoGamma, 4},
    {"_bnpzimnr_fnRepLogLik", (DL_FUNC) &_bnpzimnr_fnRepLogLik, 4},
    {"_bnpzimnr_fnSubjectLogLik", (DL_FUNC) &_bnpzimnr_fnSubjectLogLik, 6},
    {"_bnpzimnr_fnWlLogLik", (DL_FUNC) &_bnpzimnr_fnWlLogLik, 10},
    {"_bnpzimnr_fnSampWVec", (DL_FUNC) &_bnpzimnr_fnSampWVec, 10},
    {"_bnpzimnr_fnSampEtaVec", (DL_FUNC) &_bnpzimnr_fnSampEtaVec, 8},
    {"_bnpzimnr_fnLogMeanConstraintPrior", (DL_FUNC) &_bnpzimnr_fnLogMeanConstraintPrior, 6},
    {"_bnpzimnr_fnSampC", (DL_FUNC) &_bnpzimnr_fnSampC, 6},
    {"_bnpzimnr_fnSampCVec", (DL_FUNC) &_bnpzimnr_fnSampCVec, 8},
    {"_bnpzimnr_fnSampLambdaVec", (DL_FUNC) &_bnpzimnr_fnSampLambdaVec, 7},
    {"_bnpzimnr_fnRtkLogLik", (DL_FUNC) &_bnpzimnr_fnRtkLogLik, 10},
    {"_bnpzimnr_fnSampRVec", (DL_FUNC) &_bnpzimnr_fnSampRVec, 13},
    {"_bnpzimnr_fnSjTildeLogLik", (DL_FUNC) &_bnpzimnr_fnSjTildeLogLik, 7},
    {"_bnpzimnr_fnSampSVec", (DL_FUNC) &_bnpzimnr_fnSampSVec, 8},
    {"_bnpzimnr_fnSampSigma2", (DL_FUNC) &_bnpzimnr_fnSampSigma2, 5},
    {"_bnpzimnr_fnGetMuJVecProp", (DL_FUNC) &_bnpzimnr_fnGetMuJVecProp, 8},
    {"_bnpzimnr_fnSampThetaMat", (DL_FUNC) &_bnpzimnr_fnSampThetaMat, 15},
    {"_bnpzimnr_fnSampThetaMatMarg", (DL_FUNC) &_bnpzimnr_fnSampThetaMatMarg, 15},
    {"_bnpzimnr_fnAprxEql", (DL_FUNC) &_bnpzimnr_fnAprxEql, 2},
    {"_bnpzimnr_fnAcceptProposal", (DL_FUNC) &_bnpzimnr_fnAcceptProposal, 4},
    {"_bnpzimnr_fnMuMatCorrect", (DL_FUNC) &_bnpzimnr_fnMuMatCorrect, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_bnpzimnr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
